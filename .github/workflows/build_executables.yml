name: Build Executables
# Builds one-file and one-folder pyinstaller executables for all platforms.
# When triggered by a release (workflow call), uploads the assets to the release.
# When triggered manually: if a tag is specified, uploads the assets to release with the specified
# tag. Otherwise, simply builds the executables and discards them.

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release to upload the assets to'
        required: false
        default: ''

permissions:
  contents: write

defaults:
  run:
    shell: bash

jobs:
  build:
    timeout-minutes: 20

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-20.04, macos-11]
        mode: [onefile, onedir]
        include:
          - mode: onedir
            executable: spcache
            mime: "application/zip"

          - os: windows-2019
            mode: onedir
            asset: spcache_windows.zip
          - os: ubuntu-20.04
            mode: onedir
            asset: spcache_linux.tar.gz
          - os: macos-11
            mode: onedir
            asset: spcache_macos.tar.gz

          - os: windows-2019
            mode: onefile
            executable: spcache_windows.exe
            asset: spcache_windows.exe
            mime: "application/vnd.microsoft.portable-executable"
          - os: ubuntu-20.04
            mode: onefile
            executable: spcache_linux
            asset: spcache_linux
            mime: "application/x-executable"
          - os: macos-11
            mode: onefile
            executable: spcache_macos
            asset: spcache_macos
            mime: "application/x-mach-binary"

    steps:
      - name: Obtain release upload url
        id: obtain-upload
        run: |
          if [[ -n '${{ github.event.release.upload_url }}' ]]; then
            echo "Using upload_url from release event"
            echo 'upload_url=${{ github.event.release.upload_url }}' >> $GITHUB_OUTPUT
            exit 0
          fi
          if [[ -z '${{ github.event.inputs.tag }}' ]]; then
            echo "No tag specified, skipping"
            exit 0
          fi

          tag='${{ github.event.inputs.tag }}'
          url="https://api.github.com/repos/${{ github.repository }}/releases/tags/${tag}"
          echo "Fetching upload url from ${url}"
          header='Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'
          json="$(curl --silent "${url}" --header "${header}")"
          upload_url="$(jq -r '.upload_url' <<< "${json}")"
          echo "upload_url=${upload_url}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # This ref would be empty (default behaviour) when a tag hasn't been passed
          ref: ${{ github.event.inputs.tag }}

      - name: Setup the Python Environment
        uses: Qwerty-133/python-setup@v1
        with:
          python-version: '3.11'
          skip-pre-commit: true
          use-cache: false

      - name: Build with PyInstaller
        run: |
          extra_options=()
          if [[ '${{ matrix.mode }}' == 'onefile' ]]; then
            extra_options+=(--onefile)
          else
            if [[ '${{ matrix.os }}' == 'windows-2019' ]]; then
              sep=';'
            else
              sep=':'
            fi
            extra_options+=(
              --onedir
              --add-data "LICENSE${sep}."
              --add-data "LICENSE-THIRD-PARTY${sep}."
            )
          fi

          poetry run pyinstaller spcache/__main__.py \
            --name '${{ matrix.executable }}' \
            --copy-metadata spcache \
            --target-architecture universal2 \
            "${extra_options[@]}"

          if [[ '${{ matrix.mode }}' == 'onedir' ]]; then
            mv ./dist/spcache ./temp
            rm -rf ./dist
            mv ./temp ./dist
          fi

      - name: Quickly test executable
        run: |
          './dist/${{ matrix.executable }}' --version
          ret=0
          './dist/${{ matrix.executable }}' set --file .gitattributes || ret=$?
          (( ret == 3 ))

      - name: Prepare asset
        run: |
          if [[ '${{ matrix.mode }}' == 'onefile' ]]; then
            mv './dist/${{ matrix.executable }}' './${{ matrix.asset }}'
            exit 0
          fi

          if [[ '${{ matrix.os }}' == 'windows-2019' ]]; then
              7z a './${{ matrix.asset }}' './dist/*'
          else
              # --create --gzip --verbose --file --directory
              tar czvf './${{ matrix.asset }}' -C './dist' .
          fi

      - name: Upload release asset
        if: ${{ steps.obtain-upload.outputs.upload_url }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.obtain-upload.outputs.upload_url }}
          asset_path: ${{ matrix.asset }}
          asset_name: ${{ matrix.asset }}
          asset_content_type: ${{ matrix.mime }}
